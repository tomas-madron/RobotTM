#GamePad
import evdev
from evdev import InputDevice, categorize, ecodes

#cree un objet gamepad | creates object gamepad
gamepad = InputDevice('/dev/input/event0')

#affiche la liste des device connectes | prints out device info at start
print(gamepad)

# Picon Zero Servo Test
# Use arrow keys to move 2 servos on outputs 0 and 1 for Pan and Tilt
# Use G and H to open and close the Gripper arm
# Press Ctrl-C to stop
#

import piconzero as pz, time

#======================================================================
# Reading single character by forcing stdin to raw mode
import sys
import tty
import termios



def driveup():
    print 'Hello Tomas!'


def readchar():
    fd = sys.stdin.fileno()
    old_settings = termios.tcgetattr(fd)
    try:
        tty.setraw(sys.stdin.fileno())
        ch = sys.stdin.read(1)
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
    if ch == '0x03':
        raise KeyboardInterrupt
    return ch

def readkey(getchar_fn=None):
    getchar = getchar_fn or readchar
    c1 = getchar()
    if ord(c1) != 0x1b:
        return c1
    c2 = getchar()
    if ord(c2) != 0x5b:
        return c1
    c3 = getchar()
    return chr(0x10 + ord(c3) - 65)  # 16=Up, 17=Down, 18=Right, 19=Left arrows

# End of single character reading
#======================================================================

speed = 20

print ('Tests the servos by using the arrow keys to control')
print ('Press <space> key to centre')
print ('Press Ctrl-C to end')
print

# Define which pins are the servos
levyMotorL = 0
levyMotorR = 1
pravyMotorL = 2
pravyMotorR = 3

pz.init()

# Set output mode to Servo
pz.setOutputConfig(levyMotorL, 1)
pz.setOutputConfig(levyMotorR, 1)
pz.setOutputConfig(pravyMotorL, 1)
pz.setOutputConfig(pravyMotorR, 1)

levyMotorVal = 0
pravyMotorVal = 0


#step = 5

pz.setOutput (levyMotorL, levyMotorVal)
pz.setOutput (levyMotorR, levyMotorVal)
pz.setOutput (pravyMotorL, pravyMotorVal)
pz.setOutput (pravyMotorR, pravyMotorVal)

cas = 0.5


#define buttons
aBtn = 289
bBtn = 290
xBtn = 288
yBtn = 291
lBtn = 292
rBtn = 293
selBtn = 296
staBtn = 297


# main loop
try:
#affiche les codes interceptes |  display codes
 for event in gamepad.read_loop():
#Buttons
    if event.type == ecodes.EV_KEY:
        print(event)
        if event.value == 1:
            if event.code == xBtn:
                print("X")
                driveup()
            elif event.code == bBtn:
                print("B")
            elif event.code == aBtn:
                print("A")
            elif event.code == yBtn:
                print("Y")
            elif event.code == lBtn:
                print("LEFT")
            elif event.code == rBtn:
                print("RIGHT")
            elif event.code == selBtn:
                print("Select")
            elif event.code == staBtn:
                print("Start")
        elif event.value == 0:
          print("Release")

 #Analog gamepad
    elif event.type == ecodes.EV_ABS:
        absevent = categorize(event)
        print ecodes.bytype[absevent.event.type][absevent.event.code], absevent.event.value
        if ecodes.bytype[absevent.event.type][absevent.event.code] == "ABS_X":
             if absevent.event.value == 0:
                 speed = speed + 40
                 pz.setOutput (levyMotorL, 0)
                 pz.setOutput (levyMotorR, speed)
                 pz.setOutput (pravyMotorL, 0)
                 pz.setOutput (pravyMotorR, speed)
                 speed = speed - 40
		 print("Left")
          if ecodes.bytype[absevent.event.type][absevent.event.code] == "ABS_X":
             if absevent.event.value == 0:
                 speed = speed + 40
                 pz.setOutput (levyMotorL, 0)
                 pz.setOutput (levyMotorR, speed)
                 pz.setOutput (pravyMotorL, 0)
                 pz.setOutput (pravyMotorR, speed)
                 speed = speed - 40
		 print("Left")
             elif absevent.event.value == 255:
                 speed = speed + 40
                 pz.setOutput (levyMotorL, speed)
                 pz.setOutput (levyMotorR, 0)
                 pz.setOutput (pravyMotorL, speed)
                 pz.setOutput (pravyMotorR, 0)
                 speed = speed - 40
                 print("Right")
             elif (absevent.event.value >= 126 and absevent.event.value <= 128):
                pz.setOutput(levyMotorL, 0)
                pz.setOutput(levyMotorR, 0)
                pz.setOutput(pravyMotorL, 0)
                pz.setOutput(pravyMotorR, 0)
                print("Stop")
        elif ecodes.bytype[absevent.event.type][absevent.event.code] == "ABS_Y":
             if absevent.event.value == 0:
                pz.setOutput(levyMotorL, speed)
                pz.setOutput(levyMotorR, 0)
                pz.setOutput(pravyMotorL, 0)
                pz.setOutput(pravyMotorR, speed)
                print("Up")
             elif absevent.event.value == 255:
                pz.setOutput(levyMotorL, 0)
                pz.setOutput(levyMotorR, speed)
                pz.setOutput(pravyMotorL, speed)
                pz.setOutput(pravyMotorR, 0)
                print("Down")
             elif (absevent.event.value >= 126 and absevent.event.value <= 128):
                pz.setOutput(levyMotorL, 0)
                pz.setOutput(levyMotorR, 0)
                pz.setOutput(pravyMotorL, 0)
                pz.setOutput(pravyMotorR, 0)
                print("Stop")

except KeyboardInterrupt:
    print ('Keyboard Interruption')

finally:
    levyMotorVal = pravyMotorVal = speed = 0
    pz.setOutput (levyMotorL, levyMotorVal)
    pz.setOutput (levyMotorR, levyMotorVal)
    pz.setOutput (pravyMotorL, pravyMotorVal)
    pz.setOutput (pravyMotorR, pravyMotorVal)
    pz.cleanup()
